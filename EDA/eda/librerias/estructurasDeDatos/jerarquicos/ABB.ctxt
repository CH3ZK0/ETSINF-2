#BlueJ class context
comment0.params=
comment0.target=ABB()
comment0.text=\ \r\n\ Constructor\ de\ un\ ABB\ vacio\ \r\n
comment1.params=v
comment1.target=ABB(java.lang.Comparable[])
comment1.text=\r\n\ Constructor\ de\ un\ ABB\ con\ los\ elementos\ del\ vector\ dado.\r\n\ El\ ABB\ resultante\ debe\ estar\ equilibrado.\r\n\ @param\ v\ Array\ con\ los\ elementos\ a\ insertar\ en\ el\ ABB\r\n
comment10.params=
comment10.target=java.lang.Comparable\ recuperarMin()
comment10.text=\ \ SII\ \!esVacio()\:\ devuelve\ el\ elemento\ minimo\ del\ ABB\r\n\ @return\ Elemento\ minimo\ \ \r\n
comment11.params=actual
comment11.target=NodoABB\ recuperarMin(NodoABB)
comment11.text=\ Devuelve\ el\ elemento\ minimo\ a\ partir\ del\ nodo\ actual\ \r\n\ @param\ \ \ \ actual\ \ Nodo\ actual\ en\ la\ busqueda\r\n\ @return\ \ \ Nodo\ que\ contiene\ el\ elemento\ m\u00EDnimo\ \r\n
comment12.params=
comment12.target=java.lang.Comparable\ eliminarMin()
comment12.text=\ SII\ \!esVacio()\:\ elimina\ el\ minimo\ del\ ABB\r\n\ @return\ Elemento\ minimo\ del\ ABB\ (null\ si\ esta\ vacio)\r\n
comment13.params=actual
comment13.target=NodoABB\ eliminarMin(NodoABB)
comment13.text=\ Elimina\ el\ minimo\ a\ partir\ del\ nodo\ actual\r\n\ @param\ \ \ \ actual\ \ Nodo\ actual\ en\ la\ busqueda\r\n\ @return\ Nodo\ raiz\ del\ subarbol\ cuya\ raiz\ actual\ es\ el\ nodo\ actual\r\n
comment14.params=x
comment14.target=void\ eliminar(java.lang.Comparable)
comment14.text=\ Elimina\ el\ actual\ que\ contiene\ el\ dato\ x\ \r\n\ @param\ \ x\ \ \ Dato\ a\ eliminar\r\n
comment15.params=x\ actual
comment15.target=NodoABB\ eliminar(java.lang.Comparable,\ NodoABB)
comment15.text=\ Elimina\ el\ actual\ que\ contiene\ el\ dato\ x\ a\ partir\ del\ nodo\ actual\ \r\n\ @param\ \ x\ \ \ \ \ \ \ Dato\ a\ eliminar\r\n\ @param\ \ actual\ \ Nodo\ actual\ en\ la\ busqueda\r\n\ @return\ Nodo\ raiz\ del\ subarbol\ cuya\ raiz\ actual\ es\ el\ nodo\ actual\r\n
comment16.params=
comment16.target=boolean\ esVacio()
comment16.text=\r\n\ Devuelve\ true\ si\ el\ ABB\ esta\ vacio\r\n\ @return\ true\ si\ esta\ vacio,\ false\ en\ caso\ contrario\r\n
comment17.params=
comment17.target=java.lang.String\ toStringInOrden()
comment17.text=\r\n\ Recorrido\ inOrden\ del\ ABB\r\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ inOrden\r\n
comment18.params=sb\ actual
comment18.target=void\ toStringInOrden(java.lang.StringBuilder,\ NodoABB)
comment18.text=\r\n\ Recorrido\ inOrden\ a\ partir\ del\ nodo\ actual\r\n\ @param\ sb\ \ \ \ \ \ StringBuilder\ para\ ir\ construyendo\ la\ cadena\ de\ texto\ \r\n\ @param\ actual\ \ Nodo\ actual\ en\ la\ busqueda\r\n
comment19.params=
comment19.target=java.lang.String\ toStringPreOrden()
comment19.text=\r\n\ Recorrido\ en\ preOrden\ del\ ABB\r\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ preOrden\r\n
comment2.params=v\ ini\ fin
comment2.target=NodoABB\ construirEquilibrado(java.lang.Comparable[],\ int,\ int)
comment2.text=\r\n\ Construye\ un\ ABB\ equilibrado\ con\ los\ elementos\ del\ vector\ dado.\r\n\ @param\ v\ \ \ \ \ Array\ con\ los\ elementos\ a\ insertar\ en\ el\ ABB\r\n\ @param\ ini\ \ \ Inicio\ del\ intervalo\ a\ considerar\ en\ el\ vector\r\n\ @param\ fin\ \ \ Fin\ del\ intervalo\ a\ considerar\ en\ el\ vector\r\n\ @return\ Raiz\ del\ sub\u00E1rbol\r\n
comment20.params=sb\ actual
comment20.target=void\ toStringPreOrden(java.lang.StringBuilder,\ NodoABB)
comment20.text=\r\n\ Recorrido\ preOrden\ a\ partir\ del\ nodo\ actual\r\n\ @param\ sb\ \ \ \ \ \ StringBuilder\ para\ ir\ construyendo\ la\ cadena\ de\ texto\ \r\n\ @param\ actual\ \ Nodo\ actual\ en\ la\ busqueda\r\n
comment21.params=
comment21.target=java.lang.String\ toStringPostOrden()
comment21.text=\r\n\ Recorrido\ en\ postOrden\ del\ ABB\r\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ postOrden\r\n
comment22.params=sb\ actual
comment22.target=void\ toStringPostOrden(java.lang.StringBuilder,\ NodoABB)
comment22.text=\r\n\ Recorrido\ postOrden\ a\ partir\ del\ nodo\ actual\r\n\ @param\ sb\ \ \ \ \ \ StringBuilder\ para\ ir\ construyendo\ la\ cadena\ de\ texto\ \r\n\ @param\ actual\ \ Nodo\ actual\ en\ la\ busqueda\r\n
comment23.params=
comment23.target=java.lang.String\ toStringPorNiveles()
comment23.text=\r\n\ Recorrido\ por\ niveles\ del\ ABB\r\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ por\ niveles\r\n
comment24.params=
comment24.target=java.lang.Comparable[]\ toArrayInOrden()
comment24.text=\r\n\ Construye\ un\ array\ ordenado\ de\ forma\ creciente\ con\ todos\ los\r\n\ elementos\ del\ ABB,\ resultado\ del\ recorrido\ en\ InOrden\ del\ mismo\r\n\ @return\ Array\ con\ los\ valores\ del\ ABB\ segun\ el\ recorrido\ en\ InOrden\r\n
comment25.params=v\ actual\ pos
comment25.target=void\ toArrayInOrden(java.lang.Comparable[],\ NodoABB,\ int)
comment25.text=\r\n\ Construye\ un\ array\ ordenado\ de\ forma\ creciente\ con\ todos\ los\r\n\ elementos\ a\ partir\ del\ nodo\ actual,\ siguiendo\ el\ recorrido\ en\ InOrden\r\n\ @param\ v\ \ \ \ \ \ \ \ \ Array\ con\ los\ elementos\ segun\ el\ recorrido\ en\ InOrden\r\n\ @param\ actual\ \ \ \ Nodo\ actual\ en\ el\ recorrido\r\n\ @param\ pos\ \ \ \ \ \ \ Posici\u00F3n\ en\ el\ array\ v\r\n
comment26.params=e
comment26.target=java.lang.Comparable\ sucesor(java.lang.Comparable)
comment26.text=\r\n\ Devuelve\ el\ sucesor\ de\ un\ elemento\ en\ el\ ABB\r\n\ @param\ e\ Elemento\ cuyo\ sucesor\ se\ va\ a\ buscar\r\n\ @return\ \ Sucesor\ de\ "e",\ o\ null\ si\ no\ hay\ sucesor\r\n
comment27.params=e\ actual
comment27.target=NodoABB\ sucesor(java.lang.Comparable,\ NodoABB)
comment27.text=\ \r\n\ SII\ actual\ \!\=\ null\:\ devuelve\ el\ nodo\ de\ actual\ que\ contiene\ \r\n\ al\ sucesor\ de\ "e",\ o\ null\ si\ no\ existe\r\n\ @param\ e\ \ \ \ \ \ \ \ \ Elemento\ cuyo\ sucesor\ se\ va\ a\ buscar\r\n\ @param\ actual\ \ \ \ Nodo\ actual\ en\ la\ busqueda\r\n\ @return\ \ Sucesor\ de\ "e"\ en\ el\ nodo\ actual,\ o\ null\ si\ no\ existe\r\n
comment3.params=
comment3.target=void\ reconstruirEquilibrado()
comment3.text=\ \r\n\ Reconstruye\ el\ ABB,\ con\ los\ mismos\ datos,\ de\ forma\ que\ quede\ \r\n\ equilibrado\ \ \ \ \ \ \ \ \r\n
comment4.params=x
comment4.target=java.lang.Comparable\ recuperar(java.lang.Comparable)
comment4.text=\ Busca\ el\ valor\ dado\ en\ el\ ABB\r\n\ @param\ \ \ \ x\ \ \ \ \ \ \ Elemento\ a\ buscar\r\n\ @return\ \ \ Dato\ en\ el\ ABB\ que\ coincide\ con\ x,\ null\ si\ no\ hay\ \ \ \ \ \ \ \ \ \ \r\n
comment5.params=x\ actual
comment5.target=java.lang.Comparable\ recuperar(java.lang.Comparable,\ NodoABB)
comment5.text=\ Busca\ el\ valor\ dado\ a\ partir\ del\ nodo\ actual\r\n\ @param\ \ \ \ x\ \ \ \ \ \ \ Elemento\ a\ buscar\r\n\ @param\ \ \ \ actual\ \ Nodo\ actual\ en\ la\ busqueda\r\n\ @return\ \ \ Dato\ en\ el\ ABB\ que\ coincide\ con\ x,\ null\ si\ no\ hay\ \ \ \ \ \ \ \ \ \ \r\n
comment6.params=x
comment6.target=void\ insertar(java.lang.Comparable)
comment6.text=\ Actualiza\ el\ dato\ x\ en\ el\ ABB,\ si\ no\ esta\ lo\ inserta\ \r\n\ @param\ \ \ \ x\ \ \ \ \ \ \ Elemento\ a\ insertar/actualizar\r\n
comment7.params=x\ actual
comment7.target=NodoABB\ insertar(java.lang.Comparable,\ NodoABB)
comment7.text=\ Actualiza\ el\ dato\ x\ a\ partir\ del\ nodo\ actual.\ Si\ no\ esta\ lo\ inserta\ \r\n\ @param\ \ \ \ x\ \ \ \ \ \ \ Elemento\ a\ insertar/actualizar\r\n\ @param\ \ \ \ actual\ \ Nodo\ actual\ en\ la\ busqueda\r\n\ @return\ \ \ Nodo\ raiz\ del\ subarbol\ cuya\ raiz\ actual\ es\ el\ nodo\ actual\ \r\n
comment8.params=
comment8.target=int\ talla()
comment8.text=\r\n\ Devuelve\ el\ numero\ de\ elementos\ del\ ABB\r\n\ @return\ Talla\ del\ ABB\r\n
comment9.params=actual
comment9.target=int\ talla(NodoABB)
comment9.text=\r\n\ Devuelve\ el\ tamanyo\ del\ nodo\ actual\r\n\ @param\ actual\ \ \ Nodo\ actual\r\n\ @return\ Tamanyo\ del\ nodo\ actual\r\n
numComments=28
